name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: navigo_test
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath # Menambahkan zip dan bcmath
          coverage: xdebug

      - name: Copy .env for testing
        run: cp .env.example .env.testing

      - name: Set testing environment variables
        run: |
          sed -i "s/^APP_KEY=.*/APP_KEY=base64:testingsomerandomkeygenerated==/" .env.testing
          sed -i "s/^DB_CONNECTION=.*/DB_CONNECTION=mysql/" .env.testing
          sed -i "s/^DB_HOST=.*/DB_HOST=127.0.0.1/" .env.testing
          sed -i "s/^DB_PORT=.*/DB_PORT=${{ job.services.mysql.ports['3306'] }}/" .env.testing
          sed -i "s/^DB_DATABASE=.*/DB_DATABASE=navigo_test/" .env.testing
          sed -i "s/^DB_USERNAME=.*/DB_USERNAME=root/" .env.testing
          sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=password/" .env.testing

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Generate application key for testing
        run: php artisan key:generate --env=testing

      - name: Run database migrations for testing
        run: php artisan migrate --env=testing --force

      - name: Run PHPUnit tests
        env:
          APP_ENV: testing
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          DB_DATABASE: navigo_test
          DB_USERNAME: root
          DB_PASSWORD: password
        run: php artisan test

  docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    env:
      BRANCH_NAME: ${{ github.ref_name }} # Menggunakan BRANCH_NAME agar lebih jelas
      FORCE_REBUILD: ${{ contains(github.event.head_commit.message, '#rebuild') || contains(github.event.head_commit.message, 'force-rebuild') || contains(github.event.head_commit.message, '[rebuild]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify entrypoint script exists and set executable
        run: |
          if [ ! -f "docker/scripts/entrypoint.sh" ]; then
            echo "ERROR: entrypoint.sh does not exist at docker/scripts/entrypoint.sh"
            exit 1
          fi
          chmod +x docker/scripts/entrypoint.sh

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Clean Docker cache when forced
        if: env.FORCE_REBUILD == 'true'
        run: docker buildx prune -f

      - name: Build and push Docker image
        run: |
          echo "Building image for branch: $BRANCH_NAME"
          CACHE_FLAG=""
          if [[ "$FORCE_REBUILD" == "true" ]]; then
            CACHE_FLAG="--no-cache"
            echo "Force rebuild detected - building without cache"
          fi

          TARGET_IMAGE_BASE="${{ secrets.DOCKERHUB_USERNAME }}/navigo" # Menggunakan secrets.DOCKERHUB_USERNAME

          case "$BRANCH_NAME" in
            "main")
              echo "Building production image..."
              docker buildx build --push \
                $CACHE_FLAG \
                --tag "$TARGET_IMAGE_BASE:latest" \
                --tag "$TARGET_IMAGE_BASE:prod" \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                --file Dockerfile .
              ;;
            "dev")
              echo "Building development image..."
              docker buildx build --push \
                $CACHE_FLAG \
                --tag "$TARGET_IMAGE_BASE:dev" \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                --file Dockerfile .
              ;;
            *)
              echo "Branch '$BRANCH_NAME' not recognized for Docker build, skipping."
              ;;
          esac

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev')
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3 # Menggunakan versi yang lebih baru jika tersedia dan stabil
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22 # Sesuaikan jika port SSH Anda berbeda
          command_timeout: 5m # Menggunakan format durasi yang lebih umum
          script: |
            set -e
            echo "Starting deployment for branch: ${{ github.ref_name }}"

            export APP_KEY="${{ secrets.APP_KEY }}"
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"

            TARGET_DIR="github/NaviGo-BE" # Sesuaikan path ini jika berbeda di server Anda

            cd "$TARGET_DIR" || { echo "Deployment directory $TARGET_DIR not found on server."; exit 1; }

            echo "Cleaning up Docker system (images, containers, volumes not in use)..."
            docker system prune -af --volumes || echo "Docker system prune encountered issues, continuing..."

            if [ "${{ github.ref_name }}" = "main" ]; then
              COMPOSE_FILE="docker-compose.prod.yml"
              IMAGE_NAME="$DOCKERHUB_USERNAME/navigo:prod"
              echo "Deploying PRODUCTION environment..."
              
              echo "Fetching latest $COMPOSE_FILE from GitHub..."
              wget -O "$COMPOSE_FILE" "https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/$COMPOSE_FILE" || \
                { echo "Failed to download $COMPOSE_FILE. Ensure the file exists in the branch."; exit 1; }

              echo "Stopping current production services..."
              docker-compose -f "$COMPOSE_FILE" down --remove-orphans || echo "No services were running or failed to stop."
              
              echo "Pulling latest image: $IMAGE_NAME"
              docker pull "$IMAGE_NAME"
              
              echo "Starting production services with APP_KEY from secrets..."
              docker-compose -f "$COMPOSE_FILE" up -d
              
              echo "Waiting for services to initialize..."
              sleep 45 # Sesuaikan atau gunakan health check yang lebih baik
              
              echo "Running production migrations..."
              docker-compose -f "$COMPOSE_FILE" exec -T app php artisan migrate --force || echo "Production migration encountered issues."

            elif [ "${{ github.ref_name }}" = "dev" ]; then
              COMPOSE_FILE="docker-compose.dev.yml"
              IMAGE_NAME="$DOCKERHUB_USERNAME/navigo:dev"
              echo "Deploying DEVELOPMENT environment..."

              echo "Fetching latest $COMPOSE_FILE from GitHub..."
              wget -O "$COMPOSE_FILE" "https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/$COMPOSE_FILE" || \
                { echo "Failed to download $COMPOSE_FILE. Ensure the file exists in the branch."; exit 1; }

              echo "Stopping current development services..."
              docker-compose -f "$COMPOSE_FILE" down --remove-orphans || echo "No services were running or failed to stop."

              echo "Pulling latest image: $IMAGE_NAME"
              docker pull "$IMAGE_NAME"

              echo "Starting development services with APP_KEY from secrets..."
              export FRESH_MIGRATIONS=true # Khusus untuk dev environment jika diperlukan
              docker-compose -f "$COMPOSE_FILE" up -d
              echo "Development environment deployed. Migrations should run via entrypoint.sh."
            else
              echo "Branch ${{ github.ref_name }} is not configured for automatic deployment."
            fi

            echo "Deployment process completed for branch: ${{ github.ref_name }}"
